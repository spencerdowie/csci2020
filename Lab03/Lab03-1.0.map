CSVDemo -> CSVDemo:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
org.apache.commons.csv.Assertions -> a.a.a.a.a:
    void notNull(java.lang.Object,java.lang.String) -> a
org.apache.commons.csv.CSVFormat -> a.a.a.a.b:
    org.apache.commons.csv.CSVFormat DEFAULT -> a
    boolean allowMissingColumnNames -> b
    java.lang.Character commentMarker -> c
    char delimiter -> d
    java.lang.Character escapeCharacter -> e
    java.lang.String[] header -> f
    java.lang.String[] headerComments -> g
    boolean ignoreEmptyLines -> h
    boolean ignoreHeaderCase -> i
    boolean ignoreSurroundingSpaces -> j
    java.lang.String nullString -> k
    java.lang.Character quoteCharacter -> l
    org.apache.commons.csv.QuoteMode quoteMode -> m
    java.lang.String recordSeparator -> n
    boolean skipHeaderRecord -> o
    boolean trailingDelimiter -> p
    boolean trim -> q
    boolean isLineBreak(char) -> a
    boolean isLineBreak(java.lang.Character) -> a
    void <init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[],boolean,boolean,boolean,boolean,boolean) -> <init>
    boolean equals(java.lang.Object) -> equals
    boolean getAllowMissingColumnNames() -> a
    java.lang.Character getCommentMarker() -> b
    char getDelimiter() -> c
    java.lang.Character getEscapeCharacter() -> d
    java.lang.String[] getHeader() -> e
    boolean getIgnoreEmptyLines() -> f
    boolean getIgnoreHeaderCase() -> g
    boolean getIgnoreSurroundingSpaces() -> h
    java.lang.String getNullString() -> i
    java.lang.Character getQuoteCharacter() -> j
    boolean getSkipHeaderRecord() -> k
    boolean getTrailingDelimiter() -> l
    boolean getTrim() -> m
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String[] toStringArray(java.lang.Object[]) -> a
    void validate() -> n
    org.apache.commons.csv.CSVFormat withDelimiter(char) -> b
    org.apache.commons.csv.CSVFormat withEscape(char) -> c
    org.apache.commons.csv.CSVFormat withEscape(java.lang.Character) -> b
    org.apache.commons.csv.CSVFormat withHeader(java.lang.String[]) -> a
    org.apache.commons.csv.CSVFormat withIgnoreEmptyLines(boolean) -> a
    org.apache.commons.csv.CSVFormat withNullString(java.lang.String) -> a
    org.apache.commons.csv.CSVFormat withQuote(java.lang.Character) -> c
    org.apache.commons.csv.CSVFormat withQuoteMode(org.apache.commons.csv.QuoteMode) -> a
    org.apache.commons.csv.CSVFormat withRecordSeparator(char) -> d
    void <clinit>() -> <clinit>
org.apache.commons.csv.CSVParser -> a.a.a.a.c:
    org.apache.commons.csv.CSVFormat format -> a
    java.util.Map headerMap -> b
    org.apache.commons.csv.Lexer lexer -> c
    java.util.List recordList -> d
    long recordNumber -> e
    long characterOffset -> f
    org.apache.commons.csv.Token reusableToken -> g
    void <init>(java.io.Reader,org.apache.commons.csv.CSVFormat) -> <init>
    void <init>(java.io.Reader,org.apache.commons.csv.CSVFormat,long,long) -> <init>
    void addRecordValue(boolean) -> a
    void close() -> close
    java.util.Map initializeHeader() -> c
    boolean isClosed() -> a
    java.util.Iterator iterator() -> iterator
    org.apache.commons.csv.CSVRecord nextRecord() -> b
org.apache.commons.csv.CSVParser$1 -> a.a.a.a.d:
    org.apache.commons.csv.CSVRecord current -> a
    org.apache.commons.csv.CSVParser this$0 -> b
    void <init>(org.apache.commons.csv.CSVParser) -> <init>
    org.apache.commons.csv.CSVRecord getNextRecord() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.commons.csv.CSVParser$2 -> a.a.a.a.e:
    int[] $SwitchMap$org$apache$commons$csv$Token$Type -> a
    void <clinit>() -> <clinit>
org.apache.commons.csv.CSVRecord -> a.a.a.a.f:
    java.lang.String[] EMPTY_STRING_ARRAY -> a
    java.lang.String comment -> b
    java.util.Map mapping -> c
    long recordNumber -> d
    java.lang.String[] values -> e
    void <init>(java.lang.String[],java.util.Map,java.lang.String,long,long) -> <init>
    java.lang.String get(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    java.lang.String[] values() -> a
    void <clinit>() -> <clinit>
org.apache.commons.csv.Constants -> a.a.a.a.g:
    java.lang.Character DOUBLE_QUOTE_CHAR -> a
    void <clinit>() -> <clinit>
org.apache.commons.csv.ExtendedBufferedReader -> a.a.a.a.h:
    int lastChar -> a
    long eolCounter -> b
    long position -> c
    boolean closed -> d
    void <init>(java.io.Reader) -> <init>
    int read() -> read
    int getLastChar() -> a
    int read(char[],int,int) -> read
    java.lang.String readLine() -> readLine
    int lookAhead() -> b
    long getCurrentLineNumber() -> c
    long getPosition() -> d
    boolean isClosed() -> e
    void close() -> close
org.apache.commons.csv.Lexer -> a.a.a.a.i:
    java.lang.String CR_STRING -> a
    java.lang.String LF_STRING -> b
    char delimiter -> c
    char escape -> d
    char quoteChar -> e
    char commentStart -> f
    boolean ignoreSurroundingSpaces -> g
    boolean ignoreEmptyLines -> h
    org.apache.commons.csv.ExtendedBufferedReader reader -> i
    java.lang.String firstEol -> j
    void <init>(org.apache.commons.csv.CSVFormat,org.apache.commons.csv.ExtendedBufferedReader) -> <init>
    org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token) -> a
    org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int) -> a
    char mapNullToDisabled(java.lang.Character) -> a
    long getCurrentLineNumber() -> a
    long getCharacterPosition() -> b
    int readEscape() -> d
    boolean readEndOfLine(int) -> a
    boolean isClosed() -> c
    boolean isWhitespace(int) -> b
    boolean isStartOfLine(int) -> c
    boolean isEndOfFile(int) -> d
    boolean isDelimiter(int) -> e
    boolean isEscape(int) -> f
    boolean isQuoteChar(int) -> g
    void close() -> close
    void <clinit>() -> <clinit>
org.apache.commons.csv.QuoteMode -> a.a.a.a.j:
    org.apache.commons.csv.QuoteMode ALL -> c
    org.apache.commons.csv.QuoteMode ALL_NON_NULL -> a
    org.apache.commons.csv.QuoteMode MINIMAL -> d
    org.apache.commons.csv.QuoteMode NON_NUMERIC -> e
    org.apache.commons.csv.QuoteMode NONE -> b
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.commons.csv.Token -> a.a.a.a.k:
    org.apache.commons.csv.Token$Type type -> a
    java.lang.StringBuilder content -> b
    boolean isReady -> c
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.apache.commons.csv.Token$Type -> a.a.a.a.l:
    org.apache.commons.csv.Token$Type INVALID -> a
    org.apache.commons.csv.Token$Type TOKEN -> b
    org.apache.commons.csv.Token$Type EOF -> c
    org.apache.commons.csv.Token$Type EORECORD -> d
    org.apache.commons.csv.Token$Type COMMENT -> e
    org.apache.commons.csv.Token$Type[] $VALUES -> f
    org.apache.commons.csv.Token$Type[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
